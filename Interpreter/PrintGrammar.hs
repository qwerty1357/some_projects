{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Program where
  prt i e = case e of
    Prog id instructions -> prPrec i 0 (concatD [doc (showString "Program "), prt 0 id, doc (showString ";"), prt 0 instructions, doc (showString ".")])

instance Print Instructions where
  prt i e = case e of
    Instr decls stmts -> prPrec i 0 (concatD [prt 0 decls, prt 0 stmts])

instance Print Decl where
  prt i e = case e of
    DVar type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString ";")])
    DValFunc type_ id argsdecls instructions return -> prPrec i 0 (concatD [doc (showString "function"), prt 0 type_, prt 0 id, doc (showString "("), prt 0 argsdecls, doc (showString ")"), doc (showString "{"), prt 0 instructions, prt 0 return, doc (showString "}")])
    DVoidFunc id argsdecls instructions -> prPrec i 0 (concatD [doc (showString "function"), doc (showString "void"), prt 0 id, doc (showString "("), prt 0 argsdecls, doc (showString ")"), doc (showString "{"), prt 0 instructions, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ArgsDecl where
  prt i e = case e of
    ADecl type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    ARef type_ id -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&"), prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Arguments where
  prt i e = case e of
    Args exp -> prPrec i 0 (concatD [prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Return where
  prt i e = case e of
    Ret exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])

instance Print Stmt where
  prt i e = case e of
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    SAssign id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 exp, doc (showString ";")])
    SAdd id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "+="), prt 0 exp, doc (showString ";")])
    SSub id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "-="), prt 0 exp, doc (showString ";")])
    SMul id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "*="), prt 0 exp, doc (showString ";")])
    SDiv id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "/="), prt 0 exp, doc (showString ";")])
    SIf exp stmts -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SIfE exp stmts1 stmts2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stmts1, doc (showString "}"), doc (showString "else"), doc (showString "{"), prt 0 stmts2, doc (showString "}")])
    SWhile exp stmts -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SFor id exp1 exp2 stmts -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString ":="), prt 0 exp1, doc (showString "to"), prt 0 exp2, doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SRFor id exp1 exp2 stmts -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString ":="), prt 0 exp1, doc (showString "downto"), prt 0 exp2, doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SPrint exp -> prPrec i 0 (concatD [doc (showString "print"), prt 0 exp, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Exp where
  prt i e = case e of
    ETer exp1 exp2 exp3 -> prPrec i 0 (concatD [prt 1 exp1, doc (showString "?"), prt 1 exp2, doc (showString ":"), prt 2 exp3])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "||"), prt 2 exp2])
    EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "&&"), prt 3 exp2])
    EEq exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "=="), prt 4 exp2])
    ENeq exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "!="), prt 4 exp2])
    ELt exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "<"), prt 5 exp2])
    EGt exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString ">"), prt 5 exp2])
    ELe exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "<="), prt 5 exp2])
    EGe exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString ">="), prt 5 exp2])
    EAdd exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "+"), prt 6 exp2])
    ESub exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "-"), prt 6 exp2])
    EMul exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "*"), prt 7 exp2])
    EDiv exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "/"), prt 7 exp2])
    Eneg exp -> prPrec i 7 (concatD [doc (showString "!"), prt 8 exp])
    Emin exp -> prPrec i 7 (concatD [doc (showString "-"), prt 8 exp])
    ECpp1 id cppexp -> prPrec i 7 (concatD [prt 0 id, prt 0 cppexp])
    ECpp2 cppexp id -> prPrec i 7 (concatD [prt 0 cppexp, prt 0 id])
    EVar id -> prPrec i 8 (concatD [prt 0 id])
    EInt n -> prPrec i 8 (concatD [prt 0 n])
    EBool boolean -> prPrec i 8 (concatD [prt 0 boolean])
    ECall id argumentss -> prPrec i 8 (concatD [prt 0 id, doc (showString "("), prt 0 argumentss, doc (showString ")")])

instance Print CppExp where
  prt i e = case e of
    CInc -> prPrec i 0 (concatD [doc (showString "++")])
    CDec -> prPrec i 0 (concatD [doc (showString "--")])

instance Print Boolean where
  prt i e = case e of
    BTrue -> prPrec i 0 (concatD [doc (showString "true")])
    BFalse -> prPrec i 0 (concatD [doc (showString "false")])

instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

