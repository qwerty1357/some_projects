module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog ident instructions -> failure x
transInstructions :: Instructions -> Result
transInstructions x = case x of
  Instr decls stmts -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DVar type_ ident -> failure x
  DValFunc type_ ident argsdecls instructions return -> failure x
  DVoidFunc ident argsdecls instructions -> failure x
transArgsDecl :: ArgsDecl -> Result
transArgsDecl x = case x of
  ADecl type_ ident -> failure x
  ARef type_ ident -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  Args exp -> failure x
transReturn :: Return -> Result
transReturn x = case x of
  Ret exp -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SExp exp -> failure x
  SAssign ident exp -> failure x
  SAdd ident exp -> failure x
  SSub ident exp -> failure x
  SMul ident exp -> failure x
  SDiv ident exp -> failure x
  SIf exp stmts -> failure x
  SIfE exp stmts1 stmts2 -> failure x
  SWhile exp stmts -> failure x
  SFor ident exp1 exp2 stmts -> failure x
  SRFor ident exp1 exp2 stmts -> failure x
  SPrint exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ETer exp1 exp2 exp3 -> failure x
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENeq exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELe exp1 exp2 -> failure x
  EGe exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  Eneg exp -> failure x
  Emin exp -> failure x
  ECpp1 ident cppexp -> failure x
  ECpp2 cppexp ident -> failure x
  EVar ident -> failure x
  EInt integer -> failure x
  EBool boolean -> failure x
  ECall ident argumentss -> failure x
transCppExp :: CppExp -> Result
transCppExp x = case x of
  CInc -> failure x
  CDec -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  BTrue -> failure x
  BFalse -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x

